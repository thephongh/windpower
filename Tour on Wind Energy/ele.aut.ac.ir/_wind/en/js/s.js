// (c) Copyright 1998 S¿ren Krohn & DWTMA 22 June 1998doReset();function doReset(){	var now=new Date();	document.forms[0].date.value=now.getDate();	document.forms[0].month.value=1+parseInt(now.getMonth());	document.forms[0].hours.value=now.getHours();	document.forms[0].minutes.value=now.getMinutes();	if (navigator.appName=="Microsoft Internet Explorer") document.forms[0].readout.checked=true;	run(1);	if(navigator.appName=="Netscape"&&navigator.appVersion.substring(0,2)=="3.") {		alert("Your browser is a "+navigator.appName+" version "+ navigator.appVersion+", and it is not suited for this calculator which is optimised for Internet Explorer 4 and Netscape 4). You may use the programme at your own risk, but do not go much below 25 pixels for your plot resolution, and be aware, that you may get stack overflow, that functions may appear to be missing, and you may crash easily.");		document.forms[0].res.selectedIndex=document.forms[0].res.options.length-1;	}}function Ccity() {var str=document.forms[0].city.options[document.forms[0].city.selectedIndex].value;var a=str.indexOf(";");document.forms[0].latitude.value=str.substring(0,a);var b=str.indexOf(";",a+1);document.forms[0].latitudeM.value=str.substring(a+1,b);var c=str.indexOf(";",b+1);document.forms[0].ns[parseInt(str.substring(b+1,c))].checked=true;var d=str.indexOf(";",c+1);document.forms[0].longitude.value=str.substring(c+1,d);var e=str.indexOf(";",d+1);document.forms[0].longitudeM.value=str.substring(d+1,e);var f=str.indexOf(";",e+1);var g=str.indexOf(";",f+1);document.forms[0].ew[parseInt(str.substring(e+1,f))].checked=true;document.forms[0].stdMeridian.value=str.substring(f+1,g);document.forms[0].ewt[parseInt(str.substring(e+1,f))].checked=true;document.forms[0].pm.selectedIndex=parseInt(str.substring(e+1,f));var stdMeridian=parseFloat(str.substring(f+1,g));document.forms[0].zone.selectedIndex=Math.floor(stdMeridian/15);document.forms[0].half.selectedIndex=(2*stdMeridian/15)%2;run(1); Csolar();Crose();}function run(y) {	var months=new Array(0,31,28,31,30,31,30,31,31,30,31,30,31);	if (isNaN(y)) return(null);	var xA=new Array(0);	var yA=new Array(0);	var zA=new Array(0);	var gA=new Array(0);	var date=parseInt(document.forms[0].date.value);	var month=parseInt(document.forms[0].month.value);	var l=parseFloat(document.forms[0].longitude.value);	l+= parseFloat(document.forms[0].longitudeM.value)/60;	if (document.forms[0].ew[0].checked) l=0-l;	var l0=parseFloat(document.forms[0].stdMeridian.value);	if (document.forms[0].ewt[0].checked) l0=0-l0;	var daylight=0;	if (document.forms[0].daylight.checked) daylight=1;	var th=parseInt(document.forms[0].hours.value) +parseInt(document.forms[0].minutes.value)/60-daylight;	var fi=parseFloat(document.forms[0].latitude.value);	fi+= parseFloat(document.forms[0].latitudeM.value)/60;	var north=1;	if (document.forms[0].ns[1].checked) {fi=-fi;}// north=-1;	var n=0	for (var i=0;i<month;i++){n+=months[i]} 	n+=date-1;	var x=(360/365.25)*n-2.72;	var sinx=sin(x);	var z=(0-7.66*sinx-9.87*sin(2*x+24.99+3.83*sinx))/60;	var d=asin(0.3978*sin(x-77.51+1.92*sinx));	document.forms[0].d.value=d;	var t0=12-((l0-l)/15)-z;	document.forms[0].t0.value= daylight+Math.floor(t0);	document.forms[0].t0m.value= Math.round(60*(t0-Math.floor(t0)));	var ws=acos(-tan(d)*tan(fi));	var ta=t0-12*ws/180;	var tu=t0+12*ws/180;	document.forms[0].ta.value=daylight+Math.floor(ta);	document.forms[0].tam.value=Math.round(60*(ta-Math.floor(ta)));	document.forms[0].tu.value=daylight+Math.floor(tu);	document.forms[0].tum.value=Math.round(60*(tu-Math.floor(tu)));	var sind=sin(d);	var sinfi=sin(fi);	var cosd=cos(d);	var cosfi=cos(fi);	var dur=3600*(acos((sin(-0.2655)-sind*sinfi)/(cosd*cosfi))- acos((sin(0.2655)-sind*sinfi)/(cosd*cosfi)))/15;	document.forms[0].min.value=Math.floor(dur/60);	document.forms[0].sec.value=Math.round(dur)%60;	var stp=parseInt(document.forms[0].stp.options[document.forms[0].stp.selectedIndex].value);	var ij=0;	for (var i=0;i<y;i+=stp) {		var w=360*(th-t0)/24;		var h=asin(sind*sinfi+cosd*cosfi*cos(w));		cosh=cos(h);		// g=-asin(cosd*sin(w)/cosh);		var g=acos((sin(h)*sin(fi)-sin(d))/(cosh*cos(fi)));		if (w>0) g=-g;		zA[ij]=-sin(h);		// var t=-top/zA[ij]; // multiply x and y by t to get top shadow loc		xA[ij]=sin(-g)*cosh;		yA[ij]=north*cos(g)*cosh;		gA[ij]=g;		// if (Math.abs(g)>90) yA[ij]=-yA[ij];		th+=stp/60;		ij++;	}	document.forms[0].g.value=g;	document.forms[0].h.value=h;	document.forms[0].x.value=xA[ij-1];	document.forms[0].y.value=yA[ij-1];	document.forms[0].z.value=zA[ij-1];	return (new Array(xA,yA,zA,gA));}function Cs(){	alert("Sorry, you cannot change a result, you will have to change the latitude instead");	Csolar()}function Cu(){	var sum=0;	for (var i=0;i<12;i++){		var u=parseFloat(document.forms[0].elements["u"+(i+1)].value);		var s=parseFloat(document.forms[0].elements["s"+(i+1)].value);		if (u>s) {alert("Sorry, the number of sunshine hours in a month cannot exceed the number of daytime hours in the same month."); document.forms[0].elements["u"+(i+1)].value=s;u=s;}		if (u<0||isNaN(u)) {alert("Sorry, the number of sunshine hours in a month has to be a positive number."); document.forms[0].elements["u"+(i+1)].value=0;u=0;}		sum+=u;		document.forms[0].elements["p"+(i+1)].value= 100*u /s;	}	document.forms[0].u13.value=sum;	document.forms[0].p13.value= 100*sum / parseFloat(document.forms[0].s13.value);}function Csource(){	alert("Sorry you cannot change the source. E-mail us, if you have well documented sunshine data, and we'll add it to the programme.");	Csolar();}function Crose(){	for (var i=0;i<8;i++){			document.forms[0].elements["b"+(i+1)].value="0";		}	var v= document.forms[0].city.options[document.forms[0].city.selectedIndex].value;	var n=v.indexOf("[");	if (document.forms[0].dir[3].checked&&n!=-1){		for (var i=0;i<8;i++){			var m=v.indexOf(",",n+1);			if (m==-1) break;			document.forms[0].elements["b"+(i+1)].value=v.substring(n+1,m);			n=m;		}		document.forms[0].b9.value="100";		for (var j=0;j<parseInt(document.forms[0].compass.options.length);j++){			if (i==parseInt(document.forms[0].compass.options[j].value)){				if (parseInt(document.forms[0].compass.selectedIndex)!=j){					document.forms[0].compass.selectedIndex=j;					Ccompass();				}			break;			}		}	}}function Csolar() {	if (!document.forms[0].solar.checked){		for(var i=0;i<13;i++){			document.forms[0].elements["s"+(i+1)].value="";			document.forms[0].elements["u"+(i+1)].value="";			document.forms[0].elements["p"+(i+1)].value="";		}		document.forms[0].source.value="";		return;	}	var v=document.forms[0].city.options[document.forms[0].city.selectedIndex].value;	var n=v.indexOf("(");	if (n!=-1){		for (var i=0;i<12;i++){			var m=v.indexOf(",",n+1);			document.forms[0].elements["u"+(1+i)].value=v.substring(n+1,m);			n=m;		}		document.forms[0].source.value=v.substring(m+3,v.length-2);	}	else {		for(var i=0;i<13;i++){			document.forms[0].elements["u"+(i+1)].value="";		}	}	var months=new Array(31,59,90,120,151,181,212,243,273,304,334,365);	var fi=parseFloat(document.forms[0].latitude.value);	if (document.forms[0].ns[1].checked) {fi=-fi;}	fi+= parseFloat(document.forms[0].latitudeM.value)/60;	tanfi=tan(fi);	var n=0;	var t=0;	var u=0;	for (var i=0;i<12;i++){		var res=0;		for (n=n;n<months[i];n++){			var x=(360/365.25)*n-2.72;			var d=asin(0.3978*sin(x-77.51+1.92*sin(x)));			var r=24*acos(-tan(d)*tanfi)/180;			if (isNaN(r)){				r=0;				if (asin(sin(d)*sin(fi)+cos(d)*cos(fi))>0) r=24;			}			res+=r;		}		document.forms[0].elements["s"+(i+1)].value=res;		t+=res;		u+=parseFloat(document.forms[0].elements["u"+(i+1)].value);	}	document.forms[0].s13.value=t;	document.forms[0].u13.value=u;	for (var i=0;i<13;i++){		document.forms[0].elements["p"+(i+1)].value= 100*parseFloat(document.forms[0].elements["u"+(i+1)].value)/ parseFloat(document.forms[0].elements["s"+(i+1)].value);	}	if (isNaN(u)||u==0) alert("WARNING: You have requested a simulation using the bright sunshine table, but you have not specified the sunshine hours per month. Your turbine is placed in total darkness.");}function preparePlot(){	var months=new Array(0,31,28,31,30,31,30,31,31,30,31,30,31);	var date=new Date();	var time=date.getTime();	self.defaultStatus="Processing, please wait...";	self.status="Preparing terrain grid..."	var readout=document.forms[0].readout.checked;	var faceR=0;	var max=0;	var worst=0;	if (document.forms[0].dir[1].checked) worst=1;	if (document.forms[0].dir[2].checked){		worst=2;		faceR=parseFloat(document.forms[0].faceR.value);	}	if (document.forms[0].dir[3].checked){		var hx=parseFloat(document.forms[0].b9.value);		if (hx!=100||isNaN(hx)){			alert("Sorry, the percentage sum in wind rose table must be 100 before you can use the wind rose simuation mode.");			return;		}		worst=3;		var dirs= parseInt(document.forms[0].compass.options[document.forms[0].compass.selectedIndex].value);		var rose=new Array(0);		rose[0]=parseFloat(180/dirs);		for (var i=1;i<=dirs;i++){			rose[i]=0.01*parseFloat(document.forms[0].elements["b"+i].value);		}	}	var pct=0.01*parseFloat(document.forms[0].pct.value);	pct*=0.01*parseFloat(document.forms[0].sun.value);	var netsc=0;	if (navigator.appName=="Netscape"){		if(navigator.appVersion.substring(0,2)=="4.") netsc=4;		if(navigator.appVersion.substring(0,2)=="3.") netsc=3;	}	var res=parseInt(document.forms[0].res.options[document.forms[0].res.selectedIndex].value);	var m=parseInt(document.forms[0].m.value);	var dist=parseFloat(document.forms[0].dist.value)/m;	dist*=dist;	var wh=parseInt(document.forms[0].wh.value);	var ww=parseInt(document.forms[0].ww.value);	var cellsX=Math.floor(ww/res);	var xOrg=Math.floor(cellsX/2);	var cellsY=Math.floor(wh/res);	var yOrg=Math.floor(cellsY*0.5);	var n=cellsX*cellsY;	var d=new Array(n);	for (var i=0;i<n;i++) {d[i]=0;}	var of=1;	var sd=new Array(4);	sd[0]=document.forms[0].date.value;	sd[1]=document.forms[0].month.value;	sd[2]=document.forms[0].hours.value;	sd[3]=document.forms[0].minutes.value;	var stp=1+document.forms[0].stp.selectedIndex;	var per=2;	if (document.forms[0].per[0].checked){per=0;stp=1;}	if (document.forms[0].per[1].checked) {		per=1;		document.forms[0].minutes.value=0;	}	if (document.forms[0].per[3].checked){		per=3;		document.forms[0].date.value=1;		of=months[parseInt(document.forms[0].month.value)]	}	if (document.forms[0].per[4].checked){		per=4;		document.forms[0].date.value=1;		document.forms[0].month.value=1;		of=365;	}	var height=parseFloat(document.forms[0].height.value);	var diameter=parseFloat(document.forms[0].diameter.value);	var day=1;	var heighto=height/m;	var diametero2=(diameter/m)*(diameter/m);	var resArr=null;	for (var i=0;i<of;i++){		// self.status="Computing solar motion day "+day+" of "+of+"..."		if (per==0){			resArr=run(1);		}		else{			if (per==1){				resArr=run(60);			}			else {				document.forms[0].hours.value=document.forms[0].ta.value;				document.forms[0].minutes.value=document.forms[0].tam.value;				var no=(parseInt(document.forms[0].tu.value)-parseInt(document.forms[0].ta.value))*60+ parseInt(document.forms[0].tum.value)-parseInt(document.forms[0].tam.value);				if (isNaN(no)){// )&&parseFloat(document.forms[0].h.value)>0 					no=24*60;					document.forms[0].hours.value=0;					document.forms[0].minutes.value=0;				}				resArr=run(no);			}		}		var ras=" Rasterising day "+day+" of "+of+"...";		self.status=ras;		if (document.forms[0].solar.checked){			pct=0.0001*parseFloat(document.forms[0].elements["p"+parseInt(document.forms[0].month.value)].value)*parseFloat(document.forms[0].pct.value);		}	if (pct!=0) max=img(resArr,ras,height,m,xOrg,yOrg,cellsX,cellsY,max,heighto,diametero2,worst,pct,dist,faceR,d,rose);		day++; 		document.forms[0].date.value=1+parseInt(document.forms[0].date.value);		if (parseInt(document.forms[0].date.value)> months[parseInt(document.forms[0].month.value)]) {			document.forms[0].month.value=1+parseInt(document.forms[0].month.value);			document.forms[0].date.value=1;		}	}	document.forms[0].date.value=sd[0];	document.forms[0].month.value=sd[1];	document.forms[0].hours.value=sd[2];	document.forms[0].minutes.value=sd[3];	max=stp*max;	var v=Math.log(1+max);	if (v==0){		alert("No shadow within plot area");		return;	}	if (netsc!=0) ww+=12;	win=window.open("","win","width="+(ww)+",status,height="+(wh+50)+",scrollbars,resizable");	win.document.clear();	win.document.write("<HTML><HEAD><TITLE>Shadow Plot</TITLE><BASEFONT SIZE='1'></HEAD><BODY BGCOLOR='#FFFFFF'><FORM><TABLE WIDTH='"+(res*cellsX)+"' BORDER='0' CELLSPACING='0' CELLPADDING='0'><TR><TD WIDTH='"+(res*cellsX)+"' COLSPAN='"+cellsX+"' ALIGN='CENTER'>"+mName(diameter,height)+"</TD></TR><TR>");	var z=0;		var arr=Array(0);	var st="<TD WIDTH='"+res+"'><IMG SRC='../../../r/t.gif' WIDTH='"+res+"' HEIGHT='1'></TD>";	for (var i=0;i<cellsX;i++){win.document.write(st);arr[z++]=0;}	win.document.write("</TR>");	var index=0;	for (var i=0;i<n;i++) {		index+=d[i];		d[i]= 255-Math.round(255*Math.log(1+d[i]*stp)/v);	}	for (var j=cellsY-1;j>=0;j--){	var iOrg=0;	var vv="000000";	var fld="t";	var base=0;	var k=0;		self.status="Plotting row "+j;		win.status="Plotting row "+j;		base=j*cellsX;		k=base;		win.document.write("<TR>");		for (var i=0;i<cellsX;i++){			var origin=(i==xOrg||i==xOrg+1)&&j==yOrg;			if (d[base]!=d[k]||origin){				vv=greys(d[base]);				fld="t";				if (origin&&i==xOrg+1){vv="0066CC";iOrg=z;fld="x";} 				cell(1,k-base,vv,readout,res,z,fld,"");				var zb= Math.exp((255-d[base])/(255/v))-1;				if (per!=0){					zb=Math.round(zb);				}				else{					zb=(0.001*Math.round(1000*zb)).toString();					zb=zb.substring(0,5);				}				arr[z++]=zb;				base=k;			}			k++;		}		var vv=greys(d[base]);		if (i==cellsX&&vv=="006600"&&(k-base)==cellsX&&j!=yOrg){			// Scan and count additional rows of zeros...			for (var q=j-1;q>=0;q--){				win.status="Optimising row "+q;				self.status="Optimising row "+q;				if (q==yOrg) break;				var b=q*cellsX;				for (var r=0;r<cellsX;r++){					if (d[b++]!=255) break;				}				if (r!=cellsX) break;			}			cell(j-q,k-base,vv,readout,res,z,"t","</TR>");			j-=j-q-1;		}		else{			cell(1,k-base,vv,readout,res,z,"t","</TR>");		}		var za= Math.exp((255-d[base])/(255/v))-1;		if (per!=0){			za=Math.round(za);		}		else{			za=(0.001*Math.round(1000*za)).toString();			za=za.substring(0,5);		}		arr[z++]=za;	}	win.document.status="Writing HTML code...";	var sunTxt= document.forms[0].sun.value;	if (document.forms[0].solar.checked) sunTxt="Monthly sunshine table used with average="+Math.round(parseFloat(document.forms[0].p13.value));	win.document.write("<TR><TD COLSPAN='"+cellsX+"' ALIGN='CENTER'><FONT FACE='gillsans, frutiger, arial, helvetica, geneva' SIZE=-1>X=Turbine tower. "+res+" pixels="+m+" m. East-West="+(cellsX*m)+" m. North-South="+(cellsY*m)+" m. "+stp+" minute step length. "+document.forms[0].pct.value+"% turbine runtime. "+sunTxt+"% sunshine. Shadow minute sum="+ Math.round(index)+". Release 1.0</FONT><BR>");	win.document.write("<INPUT NAME='show' TYPE='button' VALUE='Show' onClick='b(0)'>areas with at least <INPUT NAME='m' TYPE='text' SIZE='5' MAXLENGTH='5' VALUE='"+max+"' onChange='b(0)'> minutes of shadow in <SELECT NAME='c' onChange='b(1)'><OPTION VALUE='redpix' SELECTED>red <OPTION VALUE='blpix'>black<OPTION VALUE='ypix'>yellow</SELECT>.<BR><INPUT NAME='omit' TYPE='button' VALUE='Omit' onClick='b(0)'>areas with <INPUT NAME='min' TYPE='text' SIZE='5' MAXLENGTH='5' VALUE='0' onChange='b(0)'> minutes of shadow or less. Background colour <SELECT NAME='bg' onChange='e(0)'><OPTION VALUE='green' SELECTED>green <OPTION VALUE='whpix'>white<OPTION VALUE='bluepix'>blue</SELECT></TD></TR></TABLE></FORM>");win.document.write("<SCRIPT LANGUAGE='JavaScript1.1'>");win.document.write("ar=new Array(");for (var i=0;i<z;i++){win.document.write(arr[i]+",");}win.document.write("0);iOrg="+iOrg+";bgc='green';omin=0;old="+max+";max="+max+";function a(n){self.status=ar[n]+' minutes shadow';}function b(x){self.status='Adjusting colour scheme...';var cc=x==1;var d=parseFloat(document.forms[0].m.value);if (d>max)d=max;if (d<0)d=0; document.forms[0].m.value=d;var n= document.forms[0].c.options[document.forms[0].c.selectedIndex].value;var m=ar.length-1;min=parseFloat(document.forms[0].min.value);for(var i=0;i<m;i++){if(ar[i]>=d&&(ar[i]<old||cc))document.images[i].src='../../../res/'+n+'.gif'; if (ar[i]<d&&ar[i]>=old) document.images[i].src='../../../r/t.gif';if (ar[i]<=min&&min>omin&&i!=iOrg) document.images[i].src='../../../res/'+bgc+'.gif';if (ar[i]>min&&ar[i]<omin) document.images[i].src='../../../r/t.gif';}old=d;omin=min; self.status=''}function e(){b(0);self.status='Adjusting background...';bgc= document.forms[0].bg.options[document.forms[0].bg.selectedIndex].value;m=ar.length-1;for (var i=0;i<m;i++){if (ar[i]==0&&i!=iOrg) document.images[i].src='../../../res/'+bgc+'.gif';}document.close();self.status=''}b(0);</SCRIPT></BODY>");	d=null;	arr=null;	win.status="Drawing plot..."	win.document.close();	win.focus();	run(1);	var tid,hlp="";	date=new Date();	tid=Math.round(0.001*(date.getTime()-time));	if (tid!=0) hlp="Job done in "+tid+" seconds. ";	var msg=hlp+"Maximum "+((0.001*Math.round(max*1000)).toString()).substring(0,5+Math.log(max)/Math.log(10))+" minutes shadow (red area)";	win.status=msg;	self.status=msg;	self.defaultStatus=msg;	win=null;}function cell(r,c,color,m,res,z,f,a) {	r*=res;	var s="",mo="";	if (m) mo=" onMouseOver='a("+z+");return true'";	if (c>1) s=" COLSPAN='"+c+"'";	win.document.write("<TD BGCOLOR='#"+color+"'"+s+"><IMG SRC='../../../res/"+f+".gif' HEIGHT='"+r +"' WIDTH='"+c*res+"'"+mo+"></TD>"+a);}function img(a,ras,height,m,xOrg,yOrg,cellsX,cellsY,max,heighto,diametero2,worst,pct,dist,faceR,d,rose){	var xA=a[0];	var yA=a[1];	var zA=a[2];	var gA=a[3];	var t,xo,yo,tmp,ic,oldxo,ssxo,sxo,oldyo,found;	for (var j=0;j<xA.length;j++){		if (j%10==0) self.status=ras+"image "+j+" of "+xA.length;		t=-height/zA[j];		xo=Math.round(t*xA[j]/m)+xOrg;		yo=Math.round(t*yA[j]/m)+yOrg; 		tmp=0;		ic=0;		if (xo>=0 && xo<cellsX && yo>=0 && yo<cellsY) {			ic=inCircle(xo-xOrg,yo-yOrg,0,heighto,diametero2,xA[j],yA[j],zA[j],worst,pct,gA[j],dist,faceR,rose);			if (0!=ic) {				tmp=d[yo*cellsX+xo]+=ic;				if (tmp>max) max=tmp;				oldxo=xo;				// step right				while (++xo<cellsX) {					ic= inCircle(xo-xOrg,yo-yOrg,0,heighto,diametero2,xA[j],yA[j],zA[j],worst,pct,gA[j],dist,faceR,rose);					if (ic==0) break;					tmp=d[yo*cellsX+xo]+=ic;					if (tmp>max) max=tmp;				}				xo=oldxo;				// step left				while (--xo>=0) {					ic= inCircle(xo-xOrg,yo-yOrg,0,heighto,diametero2,xA[j],yA[j],zA[j],worst,pct,gA[j],dist,faceR,rose);					if (ic==0) break;					tmp=d[yo*cellsX+xo]+=ic;					if (tmp>max) max=tmp;				}				xo=oldxo;				ssxo=xo;				sxo=xo;				oldyo=yo;				// step up				while (++yo<cellsY) {					found=false;					// step right					while (xo<cellsX) {						ic= inCircle(xo-xOrg,yo-yOrg,0,heighto,diametero2,xA[j],yA[j],zA[j],worst,pct,gA[j],dist,faceR,rose);						if (ic==0) break;						tmp=d[yo*cellsX+xo]+=ic;						if (tmp>max) max=tmp;						found=true;						xo++;					}					sxo=xo;					xo=oldxo;					// step left					while (--xo>=0) {						ic= inCircle(xo-xOrg,yo-yOrg,0,heighto,diametero2,xA[j],yA[j],zA[j],worst,pct,gA[j],dist,faceR,rose);						if (ic==0) break;						tmp=d[yo*cellsX+xo]+=ic;						if (tmp>max) max=tmp;						found=true;					}					oldxo=Math.round(0.5*(sxo+xo));					xo=oldxo;					if (found==false) break;				}				yo=oldyo;				xo=ssxo;				oldxo=ssxo;				// step down				while (--yo>=0) {					found=false;					// step right					while (xo<cellsX) {						ic= inCircle(xo-xOrg,yo-yOrg,0,heighto,diametero2,xA[j],yA[j],zA[j],worst,pct,gA[j],dist,faceR,rose);						if (ic==0) break;						tmp=d[yo*cellsX+xo]+=ic;						if (tmp>max) max=tmp;						found=true;						xo++;					}					sxo=xo;					xo=oldxo;					// step left					while (--xo>=0) {						ic= inCircle(xo-xOrg,yo-yOrg,0,heighto,diametero2,xA[j],yA[j],zA[j],worst,pct,gA[j],dist,faceR,rose);						if (ic==0) break;						tmp=d[yo*cellsX+xo]+=ic;						if (tmp>max) max=tmp;						found=true;					}					oldxo=Math.round(0.5*(sxo+xo));					xo=oldxo;					if (found==false) break;				}				yo=oldyo;			}		}	}		return(max)}function greys(n) {	var str="0123456789ABCDEF";	var s=str.charAt(Math.floor(n/16))+str.charAt(n%16);	if (s=="00") return("FF0000");	if (s=="FF") return("006600");	return(s+s+s);}function inCircle(xo,yo,zo,height,diameter2,x,y,z,worst,pct,g,dist,faceR,rose) {	var alfa=(xo/x+yo*y/(x*x))/(1+(y*y)/(x*x));	if (alfa<0) return(0);	// var beta=(yo-alfa*y)/x;	// dissolved after alfa (orthogonal to rotor plane) and beta (othogonal to alpha, parallel to rotor plane)	var rX=xo-alfa*x;	var rY=yo-alfa*y;	var rZ=-alfa*z;	var dr=height-rZ;	var dr2=dr*dr;	var p=rX*rX+rY*rY;	if (p+dr2>diameter2||(xo*xo)+(yo*yo)>dist) return(0);	if (worst==1)return(1);	if (worst==0)return(pct*acos(Math.sqrt(p/(diameter2-dr2)))/90);	if (worst==2){		if (Math.sqrt(p/(diameter2-dr2))>Math.abs(cos(faceR-g))) return(0);		return(1);	}	var res=0;	var hlp=Math.sqrt(p/(diameter2-dr2));	for (var i=1;i<rose.length;i++){		if (hlp<=Math.abs(cos((i-1)*rose[0]-g))) res+=rose[i];	}	return(res);}function mName(diameter,height) {	var worst="worst case";	if (document.forms[0].dir[0].checked) worst="random rotor direction";	if (document.forms[0].dir[2].checked) worst="fixed "+document.forms[0].faceR.value+"&deg; rotor azimuth";	if (document.forms[0].dir[3].checked) worst="rotor direction using wind rose";	var res="<FONT FACE='gillsans, frutiger, arial, helvetica, geneva'>"	res+="<B>Shadow plot ("+worst+") for wind turbine with rotor diameter "+diameter+" m and hub height "+height+" m <BR>for ";	if (document.forms[0].per[0].checked) res+= "one minute at "+document.forms[0].hours.value+":"+document.forms[0].minutes.value+" ";	if (document.forms[0].per[1].checked) res+="one hour from "+document.forms[0].hours.value+":00 ";	if (document.forms[0].per[0].checked || document.forms[0].per[1].checked){		if (document.forms[0].daylight.checked) {			res+="daylight saving time "		}		res+="on "	}	if (document.forms[0].per[2].checked || document.forms[0].per[0].checked || document.forms[0].per[1].checked) res+=document.forms[0].date.value+" ";	if (document.forms[0].per[3].checked || document.forms[0].per[2].checked || document.forms[0].per[0].checked || document.forms[0].per[1].checked) {		var n=parseInt(document.forms[0].month.value);		var m= new Array("January","February","March","April","May","June","July","August","September","October","November","December");		res=res+m[n-1];	}	if (document.forms[0].per[4].checked) res=res+"the whole year";	res+=" at "+ document.forms[0].latitude.value+"&deg; ";	res+=document.forms[0].latitudeM.value+"&#039; ";	if (document.forms[0].ns[0].checked) res=res+"northern "	if (document.forms[0].ns[1].checked) res=res+"southern "	var ndx=document.forms[0].city.selectedIndex;	res+="latitude";	if (ndx!=document.forms[0].city.options.length-1)res+=" ("+ document.forms[0].city.options[ndx].text+")";	var dist=parseFloat(document.forms[0].dist.value);	var r=parseInt(document.forms[0].res.options[document.forms[0].res.selectedIndex].value);	var md=parseFloat(document.forms[0].m.value);	var x=r*Math.floor(parseInt(document.forms[0].ww.value)/r)*0.5;	var y=r*Math.floor(parseInt(document.forms[0].wh.value)/r)*0.5;	if ((r*dist/md)*(r*dist/md)<=x*x+y*y)res+=" at distances up to "+dist+" m";	res+="</B><BR><FONT SIZE=-1>Copyright &copy 1998 Danish Wind Turbine Manufacturers Association's web site www.WINDPOWER.dk. Reproduction or commercial use is illegal.</FONT>"	return(res);}function sin(v) { return(Math.sin(0.017453293*v))}function cos(v) { return(Math.cos(0.017453293*v))}function tan(v) { return(Math.tan(0.017453293*v))}function asin(o){return((Math.asin(o))/ 0.017453293)}function acos(o){return((Math.acos(o))/ 0.017453293)}function Clatitude(){	var latitude= parseInt(document.forms[0].latitude.value);	if (latitude<0 || latitude>90||isNaN(latitude)) {		document.forms[0].latitude.value=0;		latitude=0;		alert("Latitude must be between 0 and 90 degrees.");	}	if (latitude==90) document.forms[0].latitudeM.value=0;	document.forms[0].city.selectedIndex= document.forms[0].city.options.length-1;	run(1);	Csolar();}function Clongitude(){	var longitude= parseInt(document.forms[0].longitude.value);	if (longitude<0 || longitude>180||isNaN(longitude)) {		document.forms[0].longitude.value=0;		longitude=0;		alert("Longitude must be between 0 and 180 degrees.");	}	if (longitude==180) document.forms[0].longitudeM.value=0;	document.forms[0].city.selectedIndex= document.forms[0].city.options.length-1;	run(1);}function ClatitudeM(){	var latitudeM= parseInt(document.forms[0].latitudeM.value);	if (latitudeM<0 || latitudeM>59||isNaN(latitudeM)) {		document.forms[0].latitudeM.value=0;		latitudeM=0;		alert("Latitude minutes must be between 0 and 59.");	}	if (parseInt(document.forms[0].latitude.value)==90) document.forms[0].latitudeM.value=0;	document.forms[0].city.selectedIndex= document.forms[0].city.options.length-1;	run(1);	Csolar();}function ClongitudeM(){	var longitudeM= parseInt(document.forms[0].longitudeM.value);	if (longitudeM<0 || longitudeM>59||isNaN(longitudeM)) {		document.forms[0].longitudeM.value=0; 		alert("Longitude minutes must be between 0 and 59.");	}	if (parseInt(document.forms[0].longitude.value)==180) document.forms[0].longitudeM.value=0;	document.forms[0].city.selectedIndex= document.forms[0].city.options.length-1;	run(1);}function CstdMeridian(){	var stdMeridian= parseFloat(document.forms[0].stdMeridian.value);	if (stdMeridian <0 || stdMeridian >180||isNaN(stdMeridian)) {		document.forms[0].stdMeridian.value =0;		stdMeridian= parseFloat(document.forms[0].stdMeridian.value);		document.forms[0].zone.selectedIndex=0;		document.forms[0].half.selectedIndex=0;		alert("Standard time meridian must be between 0 and 180 degrees.");	}	if ((stdMeridian*2)%15!=0) {		document.forms[0].stdMeridian.value=0;		document.forms[0].zone.selectedIndex=0;		document.forms[0].half.selectedIndex=0;		alert("Standard time meridian must be a multiple of 7.5 degrees");	}	document.forms[0].zone.selectedIndex=Math.floor(stdMeridian/15);	document.forms[0].half.selectedIndex=(2*stdMeridian/15)%2;	run(1);}function Cdate(){	var date=parseInt(document.forms[0].date.value);	var month=parseInt(document.forms[0].month.value);	if (date<1||date>months[month]|| isNaN(date)) {		document.forms[0].date.value=months[month]; 		alert("Date must be between 1 and "+months[month]+".");	}	run(1);}function Cmonth(){	var month=parseInt(document.forms[0].month.value);	if (month<1 || month>12 ||isNaN(month)) {		document.forms[0].month.value=12; 		alert("Month must be between 1 and 12.");	}	Cdate();}function Cminutes(){	var now=new Date();	var minutes= parseInt(document.forms[0].minutes.value);	if (minutes<0 || minutes>59 ||isNaN(minutes)) {		document.forms[0].minutes.value =1+parseInt(now.getMinutes()); 		alert("Minutes must be between 0 and 59.");	}	run(1)}function Chours(){	var hours= parseInt(document.forms[0].hours.value);	if (hours<0 || hours>23 ||isNaN(hours)) {		var now=new Date();		document.forms[0].hours.value =1+parseInt(now.getHours()); 		alert("Hours must be between 0 and 23.");	}	run(1)}function Cdaylight(){run(1)}function Cradio(){	document.forms[0].city.selectedIndex= document.forms[0].city.options.length-1;	run(1);	Csolar();}function Cb(){alert("Sorry, you cannot change a result. You have to change the input data in the left column instead.");	run(1);	}function Cpm(){	var n=document.forms[0].pm.selectedIndex;	if (n==0) {document.forms[0].ewt[0].checked=true;		document.forms[0].ewt[1].checked=false;}	else	{document.forms[0].ewt[0].checked=false;		document.forms[0].ewt[1].checked=true;}	run(1);}function Czeast(){document.forms[0].pm.selectedIndex=0;run(1)}function Czwest(){document.forms[0].pm.selectedIndex=1;run(1)}function Cwh(){	var wh=parseInt(document.forms[0].wh.value);	if (wh<100||isNaN(wh)){		alert("Plot area height must be at least 100 pixels.");		document.forms[0].wh.value=100;	}}function Cww(){	var ww=parseInt(document.forms[0].ww.value);	if (ww<100||isNaN(ww)){		alert("Plot area width must be at least 100 pixels.");		document.forms[0].ww.value=100;	}}function Cm(){	m=parseInt(document.forms[0].m.value);	if (m<1){		alert("Plot resolution must be at least 1 m");		document.forms[0].m.value=1;	}	if (m>100){		alert("Plot resolution maximum is 100 m");		document.forms[0].m.value=100;	}}function Czone(){	document.forms[0].stdMeridian.value= 15*parseInt(document.forms[0].zone.selectedIndex)+ 15*parseInt(document.forms[0].half.selectedIndex)*0.5;	Cpm();}function Chalf(){Czone();}function Cheight() {	var height=parseFloat(document.forms[0].height.value);	var diameter=parseFloat(document.forms[0].diameter.value);	if (height<0.5*diameter||isNaN(height)) {		alert("You cannot have a tower height which is less than half the rotor diameter, unless you dig a hole for your rotor. Please try again.");	document.forms[0].height.value=0.5*diameter;	}	run(1);}function Cdiameter(){	var height=parseFloat(document.forms[0].height.value);	var diameter=parseFloat(document.forms[0].diameter.value);	if (height<0.5*diameter||isNaN(diameter)) {		alert("You cannot have a tower height which is less than half the rotor diameter, unless you dig a hole for your rotor. Please try again.");	document.forms[0].diameter.value=02*height;	}	run(1);}function Cpct(){	var pct=parseFloat(document.forms[0].pct.value);	if (pct<1||isNaN(pct)) {		alert("Sorry, the rotor must be running at least 1 per cent of the time");		document.forms[0].pct.value=1;	}	if (pct>100){		alert("Sorry, the rotor cannot be running more than 100 per cent of the time");		document.forms[0].pct.value=100;	}}function Csun(){	var sun=parseFloat(document.forms[0].sun.value);	if (sun<1||isNaN(sun)) {		alert("Sorry, the sun must be visible at least 1 per cent of the daytime");		document.forms[0].sun.value=1;	}	if (sun>100){		alert("Sorry, the sun cannot be visible more than 100 per cent of the daytime");		document.forms[0].sun.value=100;	}}function CfaceR() {	document.forms[0].dir[2].click();	var faceR=parseFloat(document.forms[0].faceR.value);	if (faceR>90||faceR<-90||isNaN(faceR)){		alert("Sorry, the rotor must be facing an angle between -90 and 90 degrees relative to the South.");		document.forms[0].faceR.value=0;	}	faceR=parseFloat(document.forms[0].faceR.value);	var other=true;	for (var i=document.forms[0].faceM.options.length-2;i>=0;i--){		if (faceR==document.forms[0].faceM.options[i].value) { 			document.forms[0].faceM.selectedIndex=i;			other=false;		}	}	if (other) document.forms[0].faceM.selectedIndex= document.forms[0].faceM.options.length-1;}function CfaceM(){	document.forms[0].dir[2].click();	var n=document.forms[0].faceM.selectedIndex;	if (n!=document.forms[0].faceM.options.length-1) {		document.forms[0].faceR.value =parseFloat(document.forms[0].faceM.options[n].value);	}}function Cdist(){	var dist=document.forms[0].dist.value;	if (dist>5000||dist<100||isNaN(dist)){		alert("Sorry the maximum distance for shadow calculation must be between 100 and 5000 metres.");		document.forms[0].dist.value=1000;	}}function Ccompass(){	var a8=new Array("N-S.......0/180","SE-NW...315/135","E-W......270/90","NE-SW....225/45","not used","not used","not used","not used");	var a12=new Array("N-S.......0/180","SSE-NNW.330/150","ESE-WNW.300/120","E-W......270/90","ENE-WSW..240/60","NNE-SSW..210/30","not used","not used");	var a16=new Array("N-S.......0-180","SSE-NNW.338/158","SE-NW...315/135","ESE-WNW.247/113","E-W......270/90","ENE-WSW..292/68","NE-SW....315/45","NNE-SSW..337/23");	var dc=new Array(a8,a12,a16);	var n=parseInt(document.forms[0].compass.selectedIndex);	for (var i=0;i<8;i++){		document.forms[0].elements["d"+(i+1)].value=dc[n][i];	}	var d=parseInt(document.forms[0].compass.options[document.forms[0].compass.selectedIndex].value);	var sum=0;	for (var i=1;i<=d;i++){		sum+=parseFloat(document.forms[0].elements["b"+i].value);	}	document.forms[0].b9.value=sum;}function Cno(){	alert("Sorry, you cannot change a result.");	Ccompass();}function Cbs(n){	var d=parseInt(document.forms[0].compass.options[document.forms[0].compass.selectedIndex].value);	n=parseInt(n);	if (n>d){		alert("Sorry, that field is not used. You need only specify "+d+" different directions, since it works the same way if the rotor is turned 180 degrees.");		document.forms[0].elements["b"+n].value="not used";	}	else{		var v=parseFloat(document.forms[0].elements["b"+n].value);		if (v<0||v>100||isNaN(v)){			alert("Sorry the percentage of the time the rotor is facing this direction in the wind rose table ("+((n-1)*180/d)+" degrees) has to be between 0 and 100 per cent of the time.");			document.forms[0].elements["b"+n].value=0;		}	}	var sum=0;	for (var i=1;i<=d;i++){		sum+=parseFloat(document.forms[0].elements["b"+i].value);	}	document.forms[0].b9.value=sum;}// (c) Copyright 1998 S¿ren Krohn & DWTMA